// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/msasaki666/go-gen-test/model"
)

func newBlogPost(db *gorm.DB, opts ...gen.DOOption) blogPost {
	_blogPost := blogPost{}

	_blogPost.blogPostDo.UseDB(db, opts...)
	_blogPost.blogPostDo.UseModel(&model.BlogPost{})

	tableName := _blogPost.blogPostDo.TableName()
	_blogPost.ALL = field.NewAsterisk(tableName)
	_blogPost.PostID = field.NewInt32(tableName, "post_id")
	_blogPost.UserID = field.NewInt32(tableName, "user_id")
	_blogPost.CategoryID = field.NewInt32(tableName, "category_id")
	_blogPost.Title = field.NewString(tableName, "title")
	_blogPost.Content = field.NewString(tableName, "content")
	_blogPost.CreatedAt = field.NewTime(tableName, "created_at")
	_blogPost.UpdatedAt = field.NewTime(tableName, "updated_at")

	_blogPost.fillFieldMap()

	return _blogPost
}

type blogPost struct {
	blogPostDo

	ALL        field.Asterisk
	PostID     field.Int32
	UserID     field.Int32
	CategoryID field.Int32
	Title      field.String
	Content    field.String
	CreatedAt  field.Time
	UpdatedAt  field.Time

	fieldMap map[string]field.Expr
}

func (b blogPost) Table(newTableName string) *blogPost {
	b.blogPostDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b blogPost) As(alias string) *blogPost {
	b.blogPostDo.DO = *(b.blogPostDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *blogPost) updateTableName(table string) *blogPost {
	b.ALL = field.NewAsterisk(table)
	b.PostID = field.NewInt32(table, "post_id")
	b.UserID = field.NewInt32(table, "user_id")
	b.CategoryID = field.NewInt32(table, "category_id")
	b.Title = field.NewString(table, "title")
	b.Content = field.NewString(table, "content")
	b.CreatedAt = field.NewTime(table, "created_at")
	b.UpdatedAt = field.NewTime(table, "updated_at")

	b.fillFieldMap()

	return b
}

func (b *blogPost) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *blogPost) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 7)
	b.fieldMap["post_id"] = b.PostID
	b.fieldMap["user_id"] = b.UserID
	b.fieldMap["category_id"] = b.CategoryID
	b.fieldMap["title"] = b.Title
	b.fieldMap["content"] = b.Content
	b.fieldMap["created_at"] = b.CreatedAt
	b.fieldMap["updated_at"] = b.UpdatedAt
}

func (b blogPost) clone(db *gorm.DB) blogPost {
	b.blogPostDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b blogPost) replaceDB(db *gorm.DB) blogPost {
	b.blogPostDo.ReplaceDB(db)
	return b
}

type blogPostDo struct{ gen.DO }

type IBlogPostDo interface {
	gen.SubQuery
	Debug() IBlogPostDo
	WithContext(ctx context.Context) IBlogPostDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IBlogPostDo
	WriteDB() IBlogPostDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IBlogPostDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IBlogPostDo
	Not(conds ...gen.Condition) IBlogPostDo
	Or(conds ...gen.Condition) IBlogPostDo
	Select(conds ...field.Expr) IBlogPostDo
	Where(conds ...gen.Condition) IBlogPostDo
	Order(conds ...field.Expr) IBlogPostDo
	Distinct(cols ...field.Expr) IBlogPostDo
	Omit(cols ...field.Expr) IBlogPostDo
	Join(table schema.Tabler, on ...field.Expr) IBlogPostDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IBlogPostDo
	RightJoin(table schema.Tabler, on ...field.Expr) IBlogPostDo
	Group(cols ...field.Expr) IBlogPostDo
	Having(conds ...gen.Condition) IBlogPostDo
	Limit(limit int) IBlogPostDo
	Offset(offset int) IBlogPostDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IBlogPostDo
	Unscoped() IBlogPostDo
	Create(values ...*model.BlogPost) error
	CreateInBatches(values []*model.BlogPost, batchSize int) error
	Save(values ...*model.BlogPost) error
	First() (*model.BlogPost, error)
	Take() (*model.BlogPost, error)
	Last() (*model.BlogPost, error)
	Find() ([]*model.BlogPost, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BlogPost, err error)
	FindInBatches(result *[]*model.BlogPost, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.BlogPost) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IBlogPostDo
	Assign(attrs ...field.AssignExpr) IBlogPostDo
	Joins(fields ...field.RelationField) IBlogPostDo
	Preload(fields ...field.RelationField) IBlogPostDo
	FirstOrInit() (*model.BlogPost, error)
	FirstOrCreate() (*model.BlogPost, error)
	FindByPage(offset int, limit int) (result []*model.BlogPost, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IBlogPostDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (b blogPostDo) Debug() IBlogPostDo {
	return b.withDO(b.DO.Debug())
}

func (b blogPostDo) WithContext(ctx context.Context) IBlogPostDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b blogPostDo) ReadDB() IBlogPostDo {
	return b.Clauses(dbresolver.Read)
}

func (b blogPostDo) WriteDB() IBlogPostDo {
	return b.Clauses(dbresolver.Write)
}

func (b blogPostDo) Session(config *gorm.Session) IBlogPostDo {
	return b.withDO(b.DO.Session(config))
}

func (b blogPostDo) Clauses(conds ...clause.Expression) IBlogPostDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b blogPostDo) Returning(value interface{}, columns ...string) IBlogPostDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b blogPostDo) Not(conds ...gen.Condition) IBlogPostDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b blogPostDo) Or(conds ...gen.Condition) IBlogPostDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b blogPostDo) Select(conds ...field.Expr) IBlogPostDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b blogPostDo) Where(conds ...gen.Condition) IBlogPostDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b blogPostDo) Order(conds ...field.Expr) IBlogPostDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b blogPostDo) Distinct(cols ...field.Expr) IBlogPostDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b blogPostDo) Omit(cols ...field.Expr) IBlogPostDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b blogPostDo) Join(table schema.Tabler, on ...field.Expr) IBlogPostDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b blogPostDo) LeftJoin(table schema.Tabler, on ...field.Expr) IBlogPostDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b blogPostDo) RightJoin(table schema.Tabler, on ...field.Expr) IBlogPostDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b blogPostDo) Group(cols ...field.Expr) IBlogPostDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b blogPostDo) Having(conds ...gen.Condition) IBlogPostDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b blogPostDo) Limit(limit int) IBlogPostDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b blogPostDo) Offset(offset int) IBlogPostDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b blogPostDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IBlogPostDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b blogPostDo) Unscoped() IBlogPostDo {
	return b.withDO(b.DO.Unscoped())
}

func (b blogPostDo) Create(values ...*model.BlogPost) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b blogPostDo) CreateInBatches(values []*model.BlogPost, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b blogPostDo) Save(values ...*model.BlogPost) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b blogPostDo) First() (*model.BlogPost, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.BlogPost), nil
	}
}

func (b blogPostDo) Take() (*model.BlogPost, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.BlogPost), nil
	}
}

func (b blogPostDo) Last() (*model.BlogPost, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.BlogPost), nil
	}
}

func (b blogPostDo) Find() ([]*model.BlogPost, error) {
	result, err := b.DO.Find()
	return result.([]*model.BlogPost), err
}

func (b blogPostDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BlogPost, err error) {
	buf := make([]*model.BlogPost, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b blogPostDo) FindInBatches(result *[]*model.BlogPost, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b blogPostDo) Attrs(attrs ...field.AssignExpr) IBlogPostDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b blogPostDo) Assign(attrs ...field.AssignExpr) IBlogPostDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b blogPostDo) Joins(fields ...field.RelationField) IBlogPostDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b blogPostDo) Preload(fields ...field.RelationField) IBlogPostDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b blogPostDo) FirstOrInit() (*model.BlogPost, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.BlogPost), nil
	}
}

func (b blogPostDo) FirstOrCreate() (*model.BlogPost, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.BlogPost), nil
	}
}

func (b blogPostDo) FindByPage(offset int, limit int) (result []*model.BlogPost, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b blogPostDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b blogPostDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b blogPostDo) Delete(models ...*model.BlogPost) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *blogPostDo) withDO(do gen.Dao) *blogPostDo {
	b.DO = *do.(*gen.DO)
	return b
}
